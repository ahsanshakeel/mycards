// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Marketplace.SaaS.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Subscription
    {
        /// <summary>
        /// Initializes a new instance of the Subscription class.
        /// </summary>
        public Subscription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Subscription class.
        /// </summary>
        /// <param name="saasSubscriptionStatus">Indicates the status of the
        /// operation. Possible values include: 'NotStarted',
        /// 'PendingFulfillmentStart', 'Subscribed', 'Suspended',
        /// 'Unsubscribed'</param>
        /// <param name="isTest">Indicating whether the current subscription is
        /// a test asset.</param>
        /// <param name="isFreeTrial">true - the customer subscription is
        /// currently in free trial, false - the customer subscription is not
        /// currently in free trial.(optional field - default false)</param>
        /// <param name="sessionMode">Dry Run indicates all transactions run as
        /// Test-Mode in the commerce stack. Possible values include: 'None',
        /// 'DryRun'</param>
        /// <param name="sandboxType">Possible Values are None, Csp (Csp
        /// sandbox purchase). Possible values include: 'None', 'Csp'</param>
        public Subscription(System.Guid? id = default(System.Guid?), string publisherId = default(string), string offerId = default(string), string name = default(string), SubscriptionStatusEnum? saasSubscriptionStatus = default(SubscriptionStatusEnum?), AadIdentifier beneficiary = default(AadIdentifier), AadIdentifier purchaser = default(AadIdentifier), string planId = default(string), int? quantity = default(int?), SubscriptionTerm term = default(SubscriptionTerm), bool? isTest = default(bool?), bool? isFreeTrial = default(bool?), IList<AllowedCustomerOperationsEnum?> allowedCustomerOperations = default(IList<AllowedCustomerOperationsEnum?>), System.Guid? sessionId = default(System.Guid?), System.Guid? fulfillmentId = default(System.Guid?), string storeFront = default(string), SessionModeEnum? sessionMode = default(SessionModeEnum?), SandboxTypeEnum? sandboxType = default(SandboxTypeEnum?))
        {
            Id = id;
            PublisherId = publisherId;
            OfferId = offerId;
            Name = name;
            SaasSubscriptionStatus = saasSubscriptionStatus;
            Beneficiary = beneficiary;
            Purchaser = purchaser;
            PlanId = planId;
            Quantity = quantity;
            Term = term;
            IsTest = isTest;
            IsFreeTrial = isFreeTrial;
            AllowedCustomerOperations = allowedCustomerOperations;
            SessionId = sessionId;
            FulfillmentId = fulfillmentId;
            StoreFront = storeFront;
            SessionMode = sessionMode;
            SandboxType = sandboxType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publisherId")]
        public string PublisherId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "offerId")]
        public string OfferId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates the status of the operation. Possible values
        /// include: 'NotStarted', 'PendingFulfillmentStart', 'Subscribed',
        /// 'Suspended', 'Unsubscribed'
        /// </summary>
        [JsonProperty(PropertyName = "saasSubscriptionStatus")]
        public SubscriptionStatusEnum? SaasSubscriptionStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "beneficiary")]
        public AadIdentifier Beneficiary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "purchaser")]
        public AadIdentifier Purchaser { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "planId")]
        public string PlanId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "term")]
        public SubscriptionTerm Term { get; set; }

        /// <summary>
        /// Gets or sets indicating whether the current subscription is a test
        /// asset.
        /// </summary>
        [JsonProperty(PropertyName = "isTest")]
        public bool? IsTest { get; set; }

        /// <summary>
        /// Gets or sets true - the customer subscription is currently in free
        /// trial, false - the customer subscription is not currently in free
        /// trial.(optional field - default false)
        /// </summary>
        [JsonProperty(PropertyName = "isFreeTrial")]
        public bool? IsFreeTrial { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allowedCustomerOperations")]
        public IList<AllowedCustomerOperationsEnum?> AllowedCustomerOperations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionId")]
        public System.Guid? SessionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fulfillmentId")]
        public System.Guid? FulfillmentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storeFront")]
        public string StoreFront { get; set; }

        /// <summary>
        /// Gets or sets dry Run indicates all transactions run as Test-Mode in
        /// the commerce stack. Possible values include: 'None', 'DryRun'
        /// </summary>
        [JsonProperty(PropertyName = "sessionMode")]
        public SessionModeEnum? SessionMode { get; set; }

        /// <summary>
        /// Gets or sets possible Values are None, Csp (Csp sandbox purchase).
        /// Possible values include: 'None', 'Csp'
        /// </summary>
        [JsonProperty(PropertyName = "sandboxType")]
        public SandboxTypeEnum? SandboxType { get; set; }

    }
}
